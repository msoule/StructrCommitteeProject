# Structr global configuration file
#
# Place this file in the base.path directory.
#
# Please make sure this file is not publicly accessible
#


# General application-wide settings
#
# The title shown at start-up
application.title = Structr UI
#
# Listener address. Set this to the real ip address or localhost to restrict access,
# or to 0.0.0.0 to make this instance accessible over all ip addresses and hostnames
application.host = 0.0.0.0
#
# Listener port for HTTP access REST and web service
application.http.port = 8082
#
# URL base path of REST server
application.rest.path = /structr/rest
#
# Listener port of built-in FTP server
application.ftp.port = 8021
#
# HTTPS settings
# run this command to create a selfsigned certificate:
# 'keytool -genkey -keyalg RSA -alias selfsigned -keystore [KEYSTORE_FILE] -storepass [KEYSTORE_PASSWORD] -validity 360 -keysize 2048'
#
# application.https.enabled = true
# application.https.port = 8083
# application.keystore.path = [KEYSTORE_FILE]
# application.keystore.password = [KEYSTORE_PASSWORD]
#
#
# Paths
base.path = .
database.path = ./db
files.path = ./files
log.database.path = ./logDb.dat
tmp.path = /tmp
#
# Configuration class providing custom schema classes
configuration.provider = org.structr.module.JarConfigurationProvider
#
# Configure services to automatically run at start-up
configured.services = NodeService AgentService CronService SchemaService LogService HttpService FtpService CloudService
#
# Support migration from 0.8.x and earlier versions
#NodeService.migration = true
#
# Superuser username and password
# You have to set a superuser username and password in order to use
# administration and maintenance tools
superuser.username = superadmin
superuser.password = 
#
# Indent JSON
json.indentation = true
#
# Neo4j shell on port 1337
neo4j.shell.enabled = true
#
# E-Mail settings: Set host and port of an MTA Structr will use to send e-mails
smtp.host = localhost
smtp.port = 25
#
# Ports for low-level binary protocols
#tcp.port = 54555
#udp.port = 57555
#


# Servlets
#
# Available servlets
HttpService.servlets = JsonRestServlet HtmlServlet WebSocketServlet CsvServlet UploadServlet
#
# JSON/REST servlet
JsonRestServlet.authenticator = org.structr.web.auth.UiAuthenticator
JsonRestServlet.class = org.structr.rest.servlet.JsonRestServlet
JsonRestServlet.defaultview = public
JsonRestServlet.outputdepth = 3
JsonRestServlet.path = /structr/rest/*
JsonRestServlet.resourceprovider = org.nerdery.jvm.committee.CustomResourceProvider
JsonRestServlet.user.autocreate = true
JsonRestServlet.user.class = org.structr.web.entity.User
#
# HTML servlet
HtmlServlet.authenticator = org.structr.web.auth.UiAuthenticator
HtmlServlet.class = org.structr.web.servlet.HtmlServlet
HtmlServlet.defaultview = public
HtmlServlet.outputdepth = 3
HtmlServlet.path = /structr/html/*
HtmlServlet.resourceprovider = org.nerdery.jvm.committee.CustomResourceProvider
HtmlServlet.user.autocreate = true
HtmlServlet.user.class = org.structr.web.entity.User
#
# Websocket servlet
WebSocketServlet.authenticator = org.structr.web.auth.UiAuthenticator
WebSocketServlet.class = org.structr.websocket.servlet.WebSocketServlet
WebSocketServlet.defaultview = public
WebSocketServlet.path = /structr/ws/*
WebSocketServlet.resourceprovider = org.nerdery.jvm.committee.CustomResourceProvider
WebSocketServlet.user.autocreate = false
WebSocketServlet.user.class = org.structr.web.entity.User
#
# CSV servlet
CsvServlet.authenticator = org.structr.web.auth.UiAuthenticator
CsvServlet.class = org.structr.rest.servlet.CsvServlet
CsvServlet.defaultview = public
CsvServlet.outputdepth = 3
CsvServlet.path = /structr/csv/*
CsvServlet.resourceprovider = org.nerdery.jvm.committee.CustomResourceProvider
CsvServlet.user.autocreate = false
CsvServlet.user.class = org.structr.web.entity.User
#
# Upload servlet
UploadServlet.authenticator = org.structr.web.auth.UiAuthenticator
UploadServlet.class = org.structr.web.servlet.UploadServlet
UploadServlet.defaultview = public
UploadServlet.outputdepth = 3
UploadServlet.path = /structr/upload
UploadServlet.resourceprovider = org.nerdery.jvm.committee.CustomResourceProvider
UploadServlet.user.autocreate = false
UploadServlet.user.class = org.structr.web.entity.User
#


# Resource handler for static resources
# This handler is needed to serve static files with the built-in Jetty container.
# It is used by Structr's default UI and should not be changed
# Example:
#
#     contextPath  = /pages
#     resourceBase = foo/bar
#
#     foo/bar/test.html => http://<hostname>:<port>/pages/test.html
#
# Available resource handlers
#
HttpService.resourceHandlers = StructrUiHandler
StructrUiHandler.contextPath = /structr
StructrUiHandler.directoriesListed = false
StructrUiHandler.resourceBase = target/structr
StructrUiHandler.welcomeFiles = index.html
#


# Logging
#
# Set to true to enable full request logging including request body
log.requests = false
log.name = structr-yyyy_mm_dd.request.log
#
# Log code generated for custom schema
NodeExtender.log = true
#


#        OAuth configuration        
#
# Structr supports OAuth2 and OAuth1A (Twitter) authentication.
#
#
# In order to make external authentication work over OAuth,
# you need to configure the services you want to use.
#
# Please check the URLs and enter the credentials provided
# by the respective authentication service provider.
#
#
# OAuth servers
oauth.servers = github twitter linkedin google facebook
#
# See https://developer.github.com/v3/oauth/
oauth.github.authorization_location = https://github.com/login/oauth/authorize
oauth.github.token_location = https://github.com/login/oauth/access_token
oauth.github.client_id = 
oauth.github.client_secret = 
oauth.github.redirect_uri = /oauth/github/auth
oauth.github.user_details_resource_uri = https://api.github.com/user/emails
oauth.github.error_uri = /login
oauth.github.return_uri = /
#
# See https://dev.twitter.com/docs/auth/oauth
oauth.twitter.authorization_location = https://api.twitter.com/oauth/authorize
oauth.twitter.token_location = https://api.twitter.com/oauth/access_token
oauth.twitter.client_id = 
oauth.twitter.client_secret = 
oauth.twitter.redirect_uri = /oauth/twitter/auth
oauth.twitter.error_uri = /login
oauth.twitter.return_uri = /
#
# See https://developer.linkedin.com/documents/authentication
oauth.linkedin.authorization_location = https://www.linkedin.com/uas/oauth2/authorization
oauth.linkedin.token_location = https://www.linkedin.com/uas/oauth2/accessToken
oauth.linkedin.client_id = 
oauth.linkedin.client_secret = 
oauth.linkedin.redirect_uri = /oauth/linkedin/auth
oauth.linkedin.user_details_resource_uri = https://api.linkedin.com/v1/people/~/email-address?secure-urls=true
oauth.linkedin.error_uri = /login
oauth.linkedin.return_uri = /
#
# See https://developer.linkedin.com/documents/authentication
oauth.google.authorization_location = https://accounts.google.com/o/oauth2/auth
oauth.google.token_location = https://accounts.google.com/o/oauth2/token
oauth.google.client_id = 
oauth.google.client_secret = 
oauth.google.redirect_uri = /oauth/google/auth
oauth.google.user_details_resource_uri = https://www.googleapis.com/oauth2/v3/userinfo
oauth.google.error_uri = /login
oauth.google.return_uri = /
#
# See: https://developers.facebook.com/docs/reference/dialogs/oauth/
oauth.facebook.authorization_location = https://www.facebook.com/dialog/oauth
oauth.facebook.token_location = https://graph.facebook.com/oauth/access_token
oauth.facebook.client_id = 
oauth.facebook.client_secret = 
oauth.facebook.redirect_uri = /oauth/facebook/auth
oauth.facebook.user_details_resource_uri = https://graph.facebook.com/me
oauth.facebook.error_uri = /login
oauth.facebook.return_uri = /
#
